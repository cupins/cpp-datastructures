//#include "stdafx.h"


// dependencies
#include "Node.h"
#include <stdexcept>
// lib
#include <iostream>


///////////////////////////////////////////////////////////////////////
// Constructors/Destructors

///////////////////////////////////////////////////////////////////////
//!  Parameters: Template of type T for the data of the node
//
//!  Creates a default node where the data is passed by parameter
//!  any error will be caught and will display error creating node
///////////////////////////////////////////////////////////////////////
template <class T>
Node<T>::Node(T data) {
	try {
		this->data = data;
		this->next = NULL;
		this->prev = NULL;

	} catch (...){
		cout << endl << "error creating node" << endl;
	}
}
// End Constructors/Destructors
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
// Accessors/ Mutators

///////////////////////////////////////////////////////////////////////
//!  Parameters: NONE
//
//!  returns this data in the node
///////////////////////////////////////////////////////////////////////
template <class T>
T Node<T>::getData() const{
	return this->data;
}

///////////////////////////////////////////////////////////////////////
//!  Parameters: Template address to the data
//
//!  Sets the data of this node to something else
///////////////////////////////////////////////////////////////////////
template <class T>
void Node<T>::setData(const T& data) {
	 this->data = data;
}

///////////////////////////////////////////////////////////////////////
//!  Parameters: NONE
//
//!  returns a pointer to the next field in this node
///////////////////////////////////////////////////////////////////////
template <class T>
Node<T>* Node<T>::getNext() {
	return this->next;
}

///////////////////////////////////////////////////////////////////////
//!  Parameters: NONE
//
//!  returns a pointer to the prev field in this node
///////////////////////////////////////////////////////////////////////
template <class T>
Node<T>* Node<T>::getPrev() {
	return prev;
}

///////////////////////////////////////////////////////////////////////
//!  Parameters: a pointer to a node<T>
//
//!  sets the next field to the parameter *n
///////////////////////////////////////////////////////////////////////
template <class T>
void Node<T>::setNext(Node* n) {
	this->next = n;
}

///////////////////////////////////////////////////////////////////////
//!  Parameters: a pointer to a node<T>
//
//!  sets the prev field to the parameter *n
///////////////////////////////////////////////////////////////////////
template <class T>
void Node<T>::setPrev(Node* p) {
	this->prev = p;
}
// End Accessors/ Mutators
///////////////////////////////////////////////////////////////////////